#!/usr/bin/env python

from __future__ import print_function

import os
import pickle
import sys
import traceback

from RF_classify import tmv_RF_classify

dependent_var = r'Definition-Score'
drop_vars = None

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)
training_path += '/'

# The function to execute the training.
def train(data_file):
    print('Starting the training.')
    try:
        rfrpd = tmv_RF_classify('Independent_Variable_w_Label-Def.csv', training_path)
        rfrpd.load_data(data_file, True, drop_vars, dependent_var)
        rfrpd.perform_modeling(rfrpd.df_ac_modeling_values, r'RF-Def-PRE-All')

        # save the model
        with open(os.path.join(model_path, 'vdok3_rf.pkl'), 'wb') as out:
            pickle.dump(rfrpd, out)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train('Key-Stem-Passage-Aggregate_plim-Def-PRE.csv')

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
